[{"authors":null,"categories":null,"content":"Hello! I’m Alex, a computer science and physics student at the University of British Columbia graduating in 2024. My interests include embedded and application development, machine learning, and numerical methods.\nI’m currently a software engineer intern on the passive safety team at Tesla, and the lead teaching assistant for CPSC 110, UBC’s major-stream introductory computer science course, where I am responsible for many of our internal systems. In my free time, I contribute to the UBC Rocket design team as a member of the avionics subteam, enjoy some light reading, and work on various side projects. I also both help plan and volunteer at UBC’s annual Physics Olympics competition.\nIn the past, I’ve worked as a software engineer intern at Kepler Communications and a numerical methods research assistant in UBC’s Numerical Linear Algebra Lab.\nI’m not currently looking for co-op opportunities, but I am starting to look for new grad roles beginning in May 2024.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"fb8642c15ff4dbaaac61f294f407e6eb","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Hello! I’m Alex, a computer science and physics student at the University of British Columbia graduating in 2024. My interests include embedded and application development, machine learning, and numerical methods.","tags":null,"title":"Alex Steele","type":"authors"},{"authors":[],"categories":null,"content":"I’m asked about how I learned about various topics in my majors with some regularity, so I figured that some might find it helpful if I started to compile a list of learning resources that I found useful. They vary in formality from textbooks and online courses to blogs and videos. I can’t guarantee all of these are necessarily good resources to pick up a new skill or improve an existing one. All I can say is that each of these resources either broadened or deepened my understanding of their respective subjects.\nComputer Science Data Structures and Algorithms Kleinberg and Tardos’ Algorithm Design\nMcDowell’s Cracking the Coding Interview\nComputer Systems Bryant and O’Hallaron’s Computer Systems: A Programmer’s Perspective\nThe YouTube video “Fast Inverse Square Root — A Quake III Algorithm” provides a surprisingly good overview of floating-point number representations.\nNumerical Methods Ascher and Greif’s A First Course in Numerical Methods Machine Learning DeepLearning.AI’s “Deep Learning Specialization” on Coursera provides a decent overview of machine learning techniques, albeit one devoid of much theory.\nRussel and Norvig’s Artificial Intelligence: A Modern Approach\nSutton and Barto’s Reinforcement Learning: An Introduction\nUBC’s machine learning courses have made their materials publically available on GitHub\nDive into Deep Learning is a fairly comprehensive overview of deep neural networks written by a team of Amazon researchers.\nSoftware Engineering Robert “Uncle Bob” Martin, the author of Clean Code and Clean Architecture gave a series of excellent talks on software development and project management that I would highly recommend.\nEven as someone who has never played the game and frankly has little interest in game development, the Factorio development blog has many interesting articles on the development process. I particularly enjoyed reading their articles on optimizations they made to allow the game to run as well as it does.\nProgramming Languages Python Raymond Hettinger’s PyCon 2015 talk “Beyond PEP 8 — Best practices for beautiful intelligible code”\nThe Little Book of Python Anti-Patterns\nC/C++ Koffman and Wolfgang’s Objects, Abstraction, Data Structures and Design: Using C++ Build Systems Craig Scott’s Professional CMake: A Practical Guide\nAn Introduction to Modern CMake\nMathematics General Riley, Hobson, and Bence’s Mathematical Methods for Physics and Engineering provides a good overview of common mathematical techniques and serves its purpose well as a general reference for most math one might end up needing in physics. Calculus James Stewart’s Calculus (or Calculus: Early Transcendentals) was my main resource for learning the subject in AP Calculus AB, AP Calculus BC, and my second year multivariable and vector calculus course. There are many free textbooks available online (UBC’s CLP earns a dishonourable mention), but none of them compare to Stewart’s approachability, intuitiveness, and challenging problems, in my experience.\nSchey’s Div, Grad, Curl, and All That is an excellent supplement to Stewart’s chapters on vector calculus. I found myself consulting it with some regularity in my electricity and magnetism course.\n3blue1brown’s Essence of Calculus\nLinear Algebra Lay’s Linear Algebra and Its Applications\nFriedberg, Insel, and Spence’s Linear Algebra\n3blue1brown’s Essence of Linear Algebra\nProofs Hammack’s Book of Proof\nAigner’s Proofs from THE BOOK\nDifferential Equations Lebl’s Notes on Diffy Qs\nPaul’s Online Math Notes has a decent set of class notes on ordinary differential equations\nBoyce and DiPrima’s Elementary Differential Equations and Boundary Value Problems\nProbability Ross’ Introduction to Probability Models\nAnderson, Seppäläinen, and Valkó’s Introduction to Probability\nPhysics General Feynman’s Six Easy Pieces and Six Not-So-Easy Pieces Elementary Physics Chabay and Sherwood’s Matter and Interactions\nHalliday, Resnick, and Walker’s Fundamentals of Physics\nRelativity Helliwell’s Special Relativity Classical Mechanics Taylor’s Classical Mechanics Thermodynamics and Statistical Mechanics Schroeder’s An Introduction to Thermal Physics Electricity and Magnetism Griffiths’ Introduction to Electrodynamics Quantum Mechanics Griffiths and Schroeter’s Introduction to Quantum Mechanics\nSusskind and Friedman’s Quantum Mechanics: The Theoretical Minimum\n","date":1650067200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650067200,"objectID":"c6625328e7b2e36b114847f299065f54","permalink":"https://alexdsteele.com/resources/","publishdate":"2022-04-16T00:00:00Z","relpermalink":"/resources/","section":"","summary":"I’m asked about how I learned about various topics in my majors with some regularity, so I figured that some might find it helpful if I started to compile a list of learning resources that I found useful.","tags":null,"title":"Learning Resources","type":"page"},{"authors":[],"categories":[],"content":"Project Fëanor was my term project for PHYS 319: Electronics Laboratory. I designed a quadcopter using mostly 3D-printed parts and used the MSP430 microcontroller as a flight controller, while working within its limited 512 bytes of RAM and 16 kilobytes of memory. To control the four motors, I wrote C code that interfaced with an accelerometer over I2C and accepted commands from a laptop over UART.\n","date":1649116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1649116800,"objectID":"16ffaa75570d8c2c681bcbddf39be216","permalink":"https://alexdsteele.com/project/project-feanor/","publishdate":"2022-04-05T00:00:00Z","relpermalink":"/project/project-feanor/","section":"project","summary":"MSP430-based Quadcopter","tags":["C","Electronics"],"title":"Project Fëanor","type":"project"},{"authors":[],"categories":null,"content":"In my free time, I enjoy reading books, primarily (but, by no means, exclusively) fantasy, science fiction, and historical non-fiction. Here are some of my favourites, in no particular order:\nJ.R.R. Tolkien’s legendarium (The Hobbit, The Lord of the Rings, The Silmarillion, The Children of Húrin, Beren and Lúthien, The Fall of Gondolin, and Unfinished Tales of Númenor and Middle-Earth) The Wheel of Time series, by Robert Jordan Frank Herbert’s Dune Saga Andy Weir’s works (The Martian, Artemis, and Project Hail Mary) Animal Farm and Nineteen Eighty-Four, by George Orwell Hamlet and Macbeth, by William Shakespeare Pride and Prejudice, by Jane Austen A Tale of Two Cities, by Charles Dickens Moby-Dick, by Herman Melville Pygmalion, by George Bernard Shaw The Great Gatsby, by F. Scott Fitzgerald To Kill a Mockingbird, by Harper Lee Metternich: Strategist and Visionary, by Wolfram Siemann The Guns of August, by Barbara W. Tuchman The Second World War: A Complete History, by Martin Gilbert The Years of Lyndon Johnson, by Robert Caro Becoming, by Michelle Obama A Promised Land, by Barack Obama I’m currently reading:\nThe Letters of J.R.R Tolkien, edited by Humphrey Carpenter The First World War: A Complete History, by Martin Gilbert Foundation, by Isaac Asimov ","date":1647216e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647216e3,"objectID":"6da302e29c14c780e10955c05f7c11ad","permalink":"https://alexdsteele.com/reading/","publishdate":"2022-03-14T00:00:00Z","relpermalink":"/reading/","section":"","summary":"In my free time, I enjoy reading books, primarily (but, by no means, exclusively) fantasy, science fiction, and historical non-fiction. Here are some of my favourites, in no particular order:","tags":null,"title":"Reading","type":"page"},{"authors":[],"categories":[],"content":"UBC’s annual Physics Olympics just happened yesterday. Every year, high schools from across British Columbia send teams of students to compete in a series of physics-themed events. There are a couple of pre-built events, where students design some contraption; a lab event, where they need to apply what they learned to measure some quantity experimentally; Quizzics, where students answer rapid-fire physics and astronomy-related trivia; and Fermi questions, where they apply their knowledge of physics to give order-of-magnitude estimates for various fun problems.\nFermi questions are named after the Italian-American physicist Enrico Fermi, who was famously able to provide order-of-magnitude estimates for seemingly impossible-to-compute figures, like the number of piano tuners in New York City, the blast yield of the Trinity test, or the number of intelligent civilizations in the galaxy with which we could potentially communicate. The objective is to come up with a series of trivial estimates that can be multiplied together to obtain a decent estimate of a highly non-trivial problem.\nThe Fermi questions were always my favourites back when I competed in high school. For the past three years, I’ve helped design and test them. This usually involves me and Rio Weil coming up with a bunch of ideas for different quantities to estimate, then trying to determine different ways to arrive at them. Our criteria for good questions is that they must be non-elementary, robust, and doable on a calculator. By non-elementary, we just mean that it’s not a question one would see in a high school physics textbook where a student could just use a known formula and constants, together with given quantities, to obtain an answer. The solver needs to make a non-obvious estimate, or apply some sort of university-level knowledge. Robustness is determined by whether or not different approaches converge to the same answer. This usually isn’t a problem when questions are specifically-worded enough, but it can still be problematic if the solution is highly sensitive to how one chooses to model the problem. Finally, since students aren’t allowed calculators, we try to ensure that the questions don’t rely on any transcendental functions (save for the trigonometric functions that everyone has memorized) or complicated square roots.\nWe usually come up with a set of problems that trend upward in difficulty. The first question is usually a matter of making one or two (possibly slightly unintuitive) estimates and combining them using simple formulas from high school physics. The last question, however, will typically require students to come up with a more complex model or have knowledge of advanced physics (that a particularly keen AP or IB student might be expected to have).\nI thought it would be interesting to walk through the process of designing a problem. Since all of the problems from yesterday’s event were solved live by Jeorg Rottler at the end of the day, we’ll look at a question that Rio and I tried to make work for a while, but ended up putting aside.\nThe inspiration for this question came from the “Relativistic Baseball” article on xkcd’s What If? blog. I was curious about how quickly a baseball would need to be thrown to replicate the effects described in the article (namely, a small nuclear blast). To be more concrete, I phrased the question as follows:\nHow fast would one need to throw a baseball in order for its impact to release as much energy as the atomic bomb dropped on Hiroshima? Assume no air resistance.\nThe question, in its current state, requires the estimation of two quantities: the mass of a baseball and the yield of Little Boy. This alone does not make for an interesting problem. However, I was hoping that, like in xkcd, special relativity would come into play.\nIn classical mechanics, the kinetic energy of an object is given by the expression $\\frac{1}{2} m v^2$, where $m$ is the mass of the object and $v$ is its velocity. Therefore, solving this problem classically is simply a matter of substituting one’s estimates into $v = \\sqrt{\\frac{2E_{\\text{blast}}}{m}}$, where $E_{\\text{blast}}$ is the yield of the Hiroshima bomb. However, when $v$ is close to the speed of light, this relation breaks down and we must, instead, turn to special relativity.\nThe total relativistic energy of an object is given by $\\gamma m c^2$, where $\\gamma = \\frac{1}{\\sqrt{1 - \\frac{v^2}{c^2}}}$ is the so-called Lorentz factor, which is equal to $1$ for a stationary object and diverges to infinity as $v$ approaches $c$, the speed of light. To obtain the object’s relativistic kinetic energy, we simply subtract off its rest mass energy $E_0 = mc^2$ (this is obtained from the total relativistic energy formula by setting $v = 0$) and obtain $T = E - E_0 = (\\gamma - 1) m c^2$ (as a fun exercise, one can derive the classical $T = \\frac{1}{2} m v^2$ by taking a first-order Taylor approximation of this quantity). Note that we are using relativistic kinetic …","date":1646524800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646524800,"objectID":"a1c864659ccf3c9eedd8fd52a1f6430b","permalink":"https://alexdsteele.com/post/how-fast-would-one-have-to-throw-a-baseball-to-replicate-a-nuclear-blast/","publishdate":"2022-03-06T00:00:00Z","relpermalink":"/post/how-fast-would-one-have-to-throw-a-baseball-to-replicate-a-nuclear-blast/","section":"post","summary":"A brief dive into the process of designing and testing a Fermi estimation question for UBC's Physics Olympics","tags":[],"title":"How fast would one have to throw a baseball in order to replicate a nuclear blast?","type":"post"},{"authors":[],"categories":[],"content":"Our project explores the use of GPT-3’s comprehension of code semantics in the setting of CS education. It has two components: a semantic autograder for teachers and a suite of code conversion/documentation tools for students.\nSummary Teacher The main functionality of our project is the semantic autograder. Classically, autograders rely on black-box testing. This approach obviously works well for tasks like grading problem sets and exams but falls short in some other settings. Studies show that active participation in lectures boosts learning outcomes. To encourage this, profs might have students submit code for autograding live in lectures to incentivize participation. However, this can backfire, as the autograder forces students to write perfect code while also being introduced to a topic for the first time, which distracts them from actually learning.\nIdeally, an autograder would be able to tell that a student is writing code that, while not necessarily correct, shows that they understand the problem and roughly know what a solution might look like. To fill this void, we designed a semantics-based autograder. It uses GPT-3 to look at the contents of a student’s code submission and determine how closely it resembles a solution for the given problem. The benefits of using a natural language model, rather than classical text parsing and diffing, to solve this problem are manifest. First, the semantic autograder is able to extract meaning, rather than just structure, from code. This prevents false negatives from similar-looking functions, which can easily arise when a course enforces a common template for certain functions. It also prevents false positives when a problem allows for extremely diverse solutions that can vary wildly from what the instructor expects while still solving the problem.\nStudent In order to guide students in their code implementation and debugging process, our program offers 6 different functions. There are bug fixers, docstring generators and tools to improve code quality and conciseness by converting length for-loops into compact maps or list comprehensions. The docstring generator is very helpful for students to understand the functionality of cryptic and poorly documented code. Moreover, the time complexity calculator can be used as a revision tool by CS students.\nFix Code: Fixes syntactical errors in python code\nTime Complexity: Computes the time complexity of submitted snippet\nPy Docstring: Generates a Doc string for code\nLoop to PyStream: Converts Python for loops into streams\nLoop to List: Deduces the functional programming solution for a given algorithmic solution\nList to Loop: Deduces the iterative solution for a complementary functional programming solution\nTechnology Our implementation uses OpenAI’s Python API and a Flask backend. We considered using Django but felt that it was unncessarily heavy for our use case.\nRunning Unfortunately, OpenAI doesn’t allow projects using GPT-3 to be published without approval, which takes around two weeks. We are, however, allowed to share pre-generated results, as we did in our demonstration video. Additionally, if you have an API key, you are free to run our code and verify our results. Simply clone the repository, add your key as an environment variable named OPENAI_API_KEY, and run comparisons/comparison_functions.py. Here are the expected results:\nfibonacci/starter.py: (105.779, 48.065, -57.714); Passing = False fibonacci/submission_random_garbage.py: (4.357, 3.657, -0.7000000000000002); Passing = False fibonacci/submission_wrong_function.py: (25.971, 18.292, -7.6789999999999985); Passing = False fibonacci/submission_recur.py: (25.715, 33.526, 7.8110000000000035); Passing = True fibonacci/submission_invalid.py: (18.612, 37.666, 19.054); Passing = True fibonacci/submission_indent_error.py: (11.573, 60.106, 48.533); Passing = True fibonacci/solution.py: (10.018, 57.529, 47.511); Passing = True bintree/starter.py: (14.276, 7.852, -6.4239999999999995); Passing = False bintree/submission_iterative.py: (1.316, 3.952, 2.636); Passing = True bintree/submission_alternative.py: (3.74, 5.479, 1.7389999999999999); Passing = True bintree/solution.py: (1.539, 7.248, 5.7090000000000005); Passing = True As we can see, handing in either starter file fails, as does typing random Python code or solving the wrong problem. However, all of the partial attempts at a solution get credit, which is what we want.\n","date":1642291200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642291200,"objectID":"3113bf5fefaa1ab44ef6d97460ad7eae","permalink":"https://alexdsteele.com/project/au-dela/","publishdate":"2022-01-16T00:00:00Z","relpermalink":"/project/au-dela/","section":"project","summary":"Natural language processing-based tools for computer science education. nwHacks 2022 OpenAI Prize Winner.","tags":["Flask","Machine Learning","Python","Web Development"],"title":"Au Delà","type":"project"},{"authors":[],"categories":[],"content":"In order to give myself some more tactile experience working with machine learning, I challenged myself to create a bot capable of competing in Generation I Pokemon battles. However, training the bot would still take forever with the only existing option - running a local Pokemon Showdown server and interfacing with it. To solve this problem, I devised Project Lance: a locally-run Python implementation of Generation I Pokemon battles. With it, I was able to run about 2000 full battles per second on my CPU, as opposed to the couple dozen I could run by interfacing with Showdown in that same time. To further improve training speed, I implemented a multicore evaluator for self-play. This allowed me to train a NEAT model to play optimally on a simplified version of the full battle engine.\n","date":162648e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":162648e4,"objectID":"14b99af59e7d831473d5fa4c6649c298","permalink":"https://alexdsteele.com/project/project-lance/","publishdate":"2021-07-17T00:00:00Z","relpermalink":"/project/project-lance/","section":"project","summary":"Desktop Application and NEAT Model for Generation I AI Pokemon battling.","tags":["Machine Learning","Python"],"title":"Project Lance","type":"project"},{"authors":[],"categories":[],"content":"This Swing application allows users to plot events in two-dimensional spacetime. It demonstrates how events transform between reference frames, and how concepts such as simultaneity or two events being in the same place are frame-dependent. Additionally, it allows users to calculate how far two events are from each other in spacetime; whether they are timelike, spacelike, or null separated; and whether they appear to be simultaneous or in the same place in a given frame.\n","date":1606262400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1606262400,"objectID":"b5877875c5c067693d8b1f70cf7df7c6","permalink":"https://alexdsteele.com/project/spacetime-calculator/","publishdate":"2020-11-25T00:00:00Z","relpermalink":"/project/spacetime-calculator/","section":"project","summary":"Java desktop application for solving special relativity problems.","tags":["Java","Swing"],"title":"Spacetime Calculator","type":"project"},{"authors":[],"categories":[],"content":"This is just a fun little project I made over the August long weekend. It’s a parser and interpreter for the “Tiny Student Language”, a sublanguage of Racket. I made it as an accessible, high-level demonstration of how programming languages work. As such, it has very few built-in types and functions. However, it is still capable of correctly evaluating recursive and higher-order functions, and, theoretically, can traverse trees and graphs using mutually-recursive functions (this would be rather ugly and inefficient due to the absence of define-struct and local though). I don’t plan on adding new features to TSL in the future, so as to keep it simple, but I would like to expand its error handling, so imperfect code doesn’t cause an instant crash.\n","date":1596499200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596499200,"objectID":"e63301437def4ac9b2cdb093ed6cd92e","permalink":"https://alexdsteele.com/project/tsl-interpreter/","publishdate":"2020-08-04T00:00:00Z","relpermalink":"/project/tsl-interpreter/","section":"project","summary":"Interpreter for a toy sublanguage of Racket.","tags":["Programming Languages","Python"],"title":"TSL Interpreter","type":"project"},{"authors":[],"categories":[],"content":"UBC Course Monitor is a web application that I built to help fellow UBC students find open seats in courses they want to take. Users can sign up to monitor any course section publically listed on the University of British Columbia’s Student Services Centre. Once they add the course to their list, they will receive an email notification when a seat opens up. The backend of the site was built using the Django framework and uses a Celery queue to do background monitoring. The application is deployed on Heroku and uses a PostgreSQL database to manage users and courses.\n","date":1594857600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594857600,"objectID":"544991af36a37204d4fce32078f2dcd2","permalink":"https://alexdsteele.com/project/ubc-course-monitor/","publishdate":"2020-07-16T00:00:00Z","relpermalink":"/project/ubc-course-monitor/","section":"project","summary":"Web application that monitors courses at UBC for seat openings.","tags":["Django","Python","Web Development"],"title":"UBC Course Monitor","type":"project"},{"authors":[],"categories":[],"content":"My primary role in UBC Rocket is contributing to the development of our rockets’ ground station software, which is used to remotely control the functioning of flight-critical and data collection electronics onboard and display any data received from the rocket. It is developed in Python using PyQt5 as a GUI framework. I optimized the ground station’s mapping functionality to allow it to update in real-time by implementing multithreading. I also designed and implemented an automated unit- and integration-testing framework using PyTest to ensure code correctness.\n","date":1579737600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579737600,"objectID":"96d38aa12ee5d74188acc20cf4fd3227","permalink":"https://alexdsteele.com/project/ubc-rocket-ground-station/","publishdate":"2020-01-23T00:00:00Z","relpermalink":"/project/ubc-rocket-ground-station/","section":"project","summary":"Ground station code for remote control of onboard electronics.","tags":["Python","PyQt"],"title":"UBC Rocket Ground Station","type":"project"}]