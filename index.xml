<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alex Steele</title><link>https://alexdsteele.com/</link><atom:link href="https://alexdsteele.com/index.xml" rel="self" type="application/rss+xml"/><description>Alex Steele</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 07 Apr 2024 00:00:00 +0000</lastBuildDate><image><url>https://alexdsteele.com/media/icon_hua290f4412f247f04a1fefae38f5cd580_85566_512x512_fill_lanczos_center_3.png</url><title>Alex Steele</title><link>https://alexdsteele.com/</link></image><item><title>Category Theory for Fun and Profit</title><link>https://alexdsteele.com/post/category-theory-for-fun-and-profit/</link><pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/post/category-theory-for-fun-and-profit/</guid><description>&lt;p>Algorithms for zero-sum imperfect-information games are a longstanding interest of mine. I&amp;rsquo;ve got a couple of hobby projects in that area which I work on whenever I have free time. A class of strategies I often use as a starting point for such projects is model-based search. This typically requires a good simulator of the game, which I often end up needing to write myself.&lt;/p>
&lt;p>I&amp;rsquo;m currently writing a simulator library for a game in Rust, with plans to expose a Python API through &lt;a href="https://pyo3.rs/" target="_blank" rel="noopener">PyO3&lt;/a> for rapid experimentation (PyO3 has rapidly become one of my favourite libraries&amp;mdash;my days of fighting pybind11 might just be over). I want to make my library as performant as possible. I don&amp;rsquo;t know what algorithms will work best, but I want online search to be feasible at a reasonable depth.&lt;/p>
&lt;p>In these sorts of projects, I often find myself avoiding programming in a purely object-oriented or purely functional paradigm. Each has its merits but they share a drawback: indirection. A virtual method call requires the use of an indirect call Assembly instruction since the address of the desired function is not known at compile-time. It also prevents any sort of inlining. The same applies to lambda functions in functional paradigms. The latter group also tends to rely on many heap allocations which are later garbage-collected. None of these properties are acceptable in terms of performance. Instead, I try to adopt whatever architecture will work best in a given scenario, whether it fits into a particular paradigm or not.&lt;/p>
&lt;p>With these constraints in mind, I was faced with something of a dilemma when figuring out how to generate the next nodes in the game tree given a current node. You see, I wanted my simulator to be useful for both evaluation and exploration. In the former use case, I&amp;rsquo;d want it to quickly sample one possible outcome of a random process. In the latter, I&amp;rsquo;d want all possible outcomes, so I could construct the game tree properly. These goals resulted in two functions that (drastically simplified) looked something like these:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rand&lt;/span>::&lt;span class="n">prelude&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next_state&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="kt">u8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">u8&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next_states&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="kt">u8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">..=&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">copied&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These two functions may seem different enough, but upon closer inspection, one can find common behaviour. Note how both sum their input with some &lt;code>u8&lt;/code> with a &lt;code>wrapping_add&lt;/code> and then reduce modulo 3 if some &lt;code>bool&lt;/code> is true. The only differences relate to where those &lt;code>u8&lt;/code> and &lt;code>bool&lt;/code> values come from. In &lt;code>next_state&lt;/code>, they are random, but in &lt;code>next_states&lt;/code>, all possible values are looped over. The former is used for quick evaluation; the latter is used for complete exploration. However, the process remains the same, and that worries me.&lt;/p>
&lt;p>Since the same process is described in code twice, the above listing flies in the face of the principle of DRY: &amp;ldquo;Don&amp;rsquo;t repeat yourself.&amp;rdquo; This may seem like unproductive fretting over writing the cleanest possible code and, in this example, it probably is. But in my actual codebase, sharing this process description meant paired chains of helper functions operating on parameters of types &lt;code>State&lt;/code> and &lt;code>Vec&amp;lt;State&amp;gt;&lt;/code> respectively. These chains of functions were tightly coupled to each other&amp;mdash;a change in the &lt;code>State&lt;/code> version of a function almost always induced a change in the &lt;code>Vec&amp;lt;State&amp;gt;&lt;/code> version. It also meant that, if I wanted to add the option to produce a &lt;code>HashMap&amp;lt;State, usize&amp;gt;&lt;/code> or employ some clever strategy for collecting a sample of some fixed size, I would need to create a third set of duplicate functions.&lt;/p>
&lt;p>I wanted some way to abstract over both sampling from a distribution and collecting its possible outcomes in a &lt;code>Vec&lt;/code> or a &lt;code>HashMap&lt;/code>. I spent a good couple of hours thinking about the problem during my long run that afternoon. Eventually, I made a connection that I wouldn&amp;rsquo;t have expected.&lt;/p>
&lt;p>Last fall, I took a course on Programming Languages Theory (CPSC 311) taught by Professor &lt;a href="https://www.cs.ubc.ca/~rxg/" target="_blank" rel="noopener">Ron Garcia&lt;/a>. In the course, we made extensive use of monads to abstract out effectful parts of our languages and keep our interpreters simple (Ron insistently called monads &amp;ldquo;effect abstractions&amp;rdquo; for this reason). What I thought I wanted was some sort of monad that could abstract over these different behaviours and return types, which I could implement using Rust&amp;rsquo;s trait system and monomorphize away at compile time.&lt;/p>
&lt;p>After a good amount of category theory review and some valuable input from Ron and from my old friend &lt;a href="https://passingti.me/" target="_blank" rel="noopener">Sean Bocirnea&lt;/a> (whom I&amp;rsquo;m sure could have done this himself in fewer attempts), I was able to put together a first-pass implementation.&lt;/p>
&lt;p>It turned out what I actually needed was something between a &lt;a href="https://en.wikipedia.org/wiki/Functor_%28functional_programming%29" target="_blank" rel="noopener">functor&lt;/a> and an &lt;a href="https://en.wikipedia.org/wiki/Applicative_functor" target="_blank" rel="noopener">applicative functor&lt;/a> (monads are a special case of applicatives). In short, I needed a collection of some arbitrary inner type which I could both create from a single instance of the inner type (&lt;code>Functor::pure&lt;/code>) and map over (&lt;code>Functor::fmap&lt;/code>). The names &amp;ldquo;functor&amp;rdquo;, &lt;code>pure&lt;/code>, and &lt;code>fmap&lt;/code> are needlessly opaque for our purposes here. Here is a concrete example of implementations of those methods for lists in Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">list_fmap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lox&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">lox&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">list_pure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These functors could be used to contain the state for a random process. A version of the &lt;a href="https://refactoring.guru/design-patterns/strategy" target="_blank" rel="noopener">Strategy pattern&lt;/a> would determine which functor should be created and operated on (&lt;code>RandomStrategy::Functor&lt;/code>), as well as how random events should be handled (&lt;code>RandomStrategy::fmap_rand&lt;/code>). Decoupling &lt;code>fmap_rand&lt;/code> from individual &lt;code>Functor&lt;/code> implementations was a major breakthrough for me in the design. This allowed the use of the same containers (like &lt;code>Vec&lt;/code>) for multiple strategies, such as listing all possible outcomes or a fixed sample size of possible outcomes.&lt;/p>
&lt;p>In the end, this is the interface I ended up with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RandomStrategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>: &lt;span class="nc">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Required methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap_rand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>: &lt;span class="nc">RandomVariable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">rng&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Rng&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Standard&lt;/span>: &lt;span class="nc">Distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Required method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">pure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>: &lt;span class="nc">I&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Inner&lt;/span>: &lt;span class="nb">Clone&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Eq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Hash&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">PartialEq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RandomVariable&lt;/span>: &lt;span class="nb">Sized&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nc">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Standard&lt;/span>: &lt;span class="nc">Distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Required method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">sample_space&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Item&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="bp">Self&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This looks like a lot, but it&amp;rsquo;s fairly easy to break down. A &lt;code>RandomStrategy&lt;/code> abstracts over different approaches to handling a point in a process where randomness plays a role. Associated with a &lt;code>RandomStrategy&lt;/code> is a &lt;code>Functor&lt;/code>, which acts as a container for an &lt;code>Inner&lt;/code>, which is just the type that the original random process was operating on. &lt;code>Functors&lt;/code> have the &lt;code>pure&lt;/code> method we alluded to earlier to begin computations. Also associated with a &lt;code>RandomStrategy&lt;/code> are &lt;code>fmap&lt;/code> and &lt;code>fmap_rand&lt;/code> functions, which take a &lt;code>Functor&lt;/code> and apply a function operating on the inner of a &lt;code>Functor&lt;/code> and (in the case of &lt;code>fmap_rand&lt;/code>) an arbitrary &lt;code>RandomVariable&lt;/code>. A &lt;code>RandomVariable&lt;/code> is just a type that supports sampling from the &lt;code>Standard&lt;/code> distribution and enumerating all possible outcomes using its &lt;code>sample_space&lt;/code> associated function.&lt;/p>
&lt;p>The definition of &lt;code>fmap&lt;/code> as an associated function of a &lt;code>RandomStrategy&lt;/code>, rather than a method of a &lt;code>Functor&lt;/code>, is due to a limitation of Rust&amp;rsquo;s type system. Ideally, we&amp;rsquo;d want something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Required methods
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">pure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>: &lt;span class="nc">I&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately, &lt;code>Self&lt;/code> is equivalent to &lt;code>Functor&amp;lt;I&amp;gt;&lt;/code>, not just &lt;code>Functor&lt;/code>. This makes defining &lt;code>fmap&lt;/code> as a method on a &lt;code>Functor&lt;/code> impossible at the moment. This was another issue I struggled with before arriving at the above design. I only got here in &lt;a href="https://github.com/ADSteele916/rand-functors/releases/tag/v0.3.0" target="_blank" rel="noopener">v0.3.0&lt;/a>; prior versions used a different hack, borrowed from the &lt;a href="https://docs.rs/higher/latest/higher/" target="_blank" rel="noopener">&lt;code>higher&lt;/code>&lt;/a> crate, which proved to be unsound.&lt;/p>
&lt;p>Here are the &lt;code>Functor&lt;/code> implementations for both &amp;ldquo;raw&amp;rdquo; &lt;code>Inner&lt;/code> implementors and vectors of some &lt;code>Inner&lt;/code> implementor:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">pure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>: &lt;span class="nc">I&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">I&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">pure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>: &lt;span class="nc">I&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">vec!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here are &lt;code>RandomStrategy&lt;/code> implementations that use those &lt;code>Functor&lt;/code> implementors:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Sampler&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RandomStrategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sampler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap_rand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>: &lt;span class="nc">RandomVariable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">FnOnce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">rng&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Rng&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Standard&lt;/span>: &lt;span class="nc">Distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rng&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">pub&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Enumerator&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RandomStrategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Enumerator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">I&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">into_iter&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cp">#[inline]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">fmap_rand&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">B&lt;/span>: &lt;span class="nc">Inner&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>: &lt;span class="nc">RandomVariable&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">F&lt;/span>: &lt;span class="nb">Fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Rng&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>: &lt;span class="nc">F&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">Self&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">B&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Standard&lt;/span>: &lt;span class="nc">Distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">into_iter&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flat_map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">R&lt;/span>::&lt;span class="n">sample_space&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clone&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The most complicated parts of these implementations are the signatures. Generic programming&amp;rsquo;s power is only matched by its verbosity. However, if one looks at the actual code that&amp;rsquo;s getting run, there&amp;rsquo;s nothing all that surprising. If one looks at the implementations of &lt;code>Functor&amp;lt;I&amp;gt; for I&lt;/code> or &lt;code>Sampler&lt;/code>, the behaviour is exactly what would be expected&amp;mdash;they just apply the function, passing a randomly-generated &lt;code>RandomVariable&lt;/code> when needed. &lt;code>Functor&amp;lt;I&amp;gt; for Vec&amp;lt;I&amp;gt;&lt;/code> and &lt;code>Enumerator&lt;/code> are a bit more complicated, but can be parsed with minimal trouble by anyone with experience using Rust&amp;rsquo;s iterators. They just map over the Cartesian product of the existing &lt;code>Inner&lt;/code> elements and, in the case of &lt;code>fmap_rand&lt;/code>, all possible values of the &lt;code>RandomVariable&lt;/code> implementor being operated on by &lt;code>func&lt;/code>.&lt;/p>
&lt;p>With this abstraction, our old &lt;code>next_state&lt;/code> and &lt;code>next_states&lt;/code> functions can just become:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rand&lt;/span>::&lt;span class="n">prelude&lt;/span>::&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rand_functors&lt;/span>::&lt;span class="p">{&lt;/span>&lt;span class="n">Functor&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RandomStrategy&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">next_state&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">S&lt;/span>: &lt;span class="nc">RandomStrategy&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>: &lt;span class="kt">u8&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">S&lt;/span>::&lt;span class="n">Functor&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u8&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Functor&lt;/span>::&lt;span class="n">pure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">S&lt;/span>::&lt;span class="n">fmap_rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread_rng&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">wrapping_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">S&lt;/span>::&lt;span class="n">fmap_rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread_rng&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">out&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This new &lt;code>next_state&lt;/code> function is able to encode the same process as the two old functions, with some added syntactic overhead. Its true strength lies in its callers&amp;rsquo; ability to switch between the behaviour of either of the old functions using Rust&amp;rsquo;s &lt;a href="https://blog.rust-lang.org/2021/09/09/Rust-1.55.0.html#dedication" target="_blank" rel="noopener">&amp;ldquo;Turbofish&amp;rdquo;&lt;/a> syntax. The old &lt;code>next_state(s)&lt;/code> is equivalent to &lt;code>next_state::&amp;lt;Sampler&amp;gt;(s)&lt;/code> and the old &lt;code>next_states(s)&lt;/code> is equivalent to &lt;code>next_state::&amp;lt;Enumerator&amp;gt;(s)&lt;/code>. The crucial detail which makes all this worthwhile is that Rust&amp;rsquo;s generics are monomorphized at compile time. All instances of &lt;code>S&lt;/code> will become &lt;code>Sampler&lt;/code> and calls to its associated functions can be &lt;a href="https://twitter.com/ManishEarth/status/936084757212946432" target="_blank" rel="noopener">aggressively inlined&lt;/a>. In the end, an optimizing compiler can often output the exact same machine code as it did for the original functions, making &lt;code>RandomStrategy&lt;/code> a zero-cost abstraction.&lt;/p>
&lt;p>One could easily argue that this is just adding an unnecessary and somewhat leaky abstraction. When using &lt;code>rand-functors&lt;/code>, developers need to wrap most computations in calls to &lt;code>fmap&lt;/code> and &lt;code>fmap_rand&lt;/code>. They will also likely need to modify many of their method signatures to consume and produce functors instead of inners. I agree that in our trivial example of &lt;code>next_state&lt;/code> and &lt;code>next_states&lt;/code>, the use of &lt;code>rand_functors&lt;/code> is probably unnecessary. But in larger, more complex random processes, the abstraction demonstrates its usefulness.&lt;/p>
&lt;p>This crate&amp;rsquo;s true value, in my experience using it, is its ability to localize changes. I originally planned on using &lt;code>Sampler&lt;/code> and &lt;code>Enumerator&lt;/code> for my model-based search implementation. However, I realized that my random processes typically resulted in duplicate states, causing the vectors produced by the &lt;code>Enumerator&lt;/code> strategies to grow unnecessarily long. This led me to believe a &lt;code>HashMap&lt;/code> might be better instead. By designing a new &lt;code>Counter&lt;/code> strategy, with a &lt;code>HashMap&amp;lt;I, usize&amp;gt;&lt;/code> as its functor, I was able to test this theory extremely quickly. I swapped &lt;code>Enumerator&lt;/code> for &lt;code>Counter&lt;/code> and ran my benchmarks, confident that each strategy was being run as efficiently as possible. That&amp;rsquo;s the true power of a zero-cost abstraction.&lt;/p>
&lt;p>This entire process reinforced my belief in the importance of maintaining knowledge in a broad range of CS fields. Far too often, I see peers of mine in the CS department thumbing their noses at certain courses. I know someone who has taken Artificial Intelligence, Machine Learning and Data Mining, Intelligent Systems, Computer Vision, Natural Language Processing, and Advanced Machine Learning (CPSC 322, 340, 422, 425, 436N, and 440, for any UBC students). However, he categorically ruled out ever taking Programming Languages Theory because he &amp;ldquo;didn&amp;rsquo;t see [himself] ever using it.&amp;rdquo; To each his own, I suppose, but he and I work on quite similar problems and something in that course was rather useful to me.&lt;/p></description></item><item><title>Models for Collaboration</title><link>https://alexdsteele.com/post/models-for-collaboration/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/post/models-for-collaboration/</guid><description>&lt;p>This past winter term, I completed CPSC 320: Intermediate Data Structures and Algorithms and, upon writing my customary reflection after finals ended, I began to notice how smoothly my group work in the course went. CPSC 320 had biweekly (i.e. fortnightly, not semiweekly) problem sets that could be worked on alone or in groups of up to three students. It was recommended, but not mandated, that we work in pairs, so I partnered with a fellow CPSC 110 teaching assistant (and a very old friend) for all five assignments. When collaborating on the homework, we adopted a workflow that, upon further discussion with our peers, turned out to be somewhat abnormal, albeit highly effective.&lt;/p>
&lt;p>The workflow that I would deem the &amp;ldquo;classic model&amp;rdquo; for group homework assignments consists of the group members dividing up the problems between themselves and solving them independently, essentially reducing one homework set into two or more. There are three major flaws with this model. First, it is seldom possible to divide up the workload perfectly, even if you make the unrealistic assumption that a question&amp;rsquo;s difficulty can be objectively determined. Some questions may be harder than others and some partners may rate certain problems&amp;rsquo; difficulties asymmetrically. This makes it easy for one partner (or multiple) to resent a real or perceived gap in effort among his or her fellow group members. Second, even if it were possible for a group to perfectly balance the assigned questions, those questions were likely assigned for a reason. When homework is divided up like this, important content can easily be missed, which can come back to bite on exams. Finally, since this model often involves hastily combining the partners&amp;rsquo; individual contributions with minimal work to edit them, it can easily result in subpar marks with one person clearly at fault. This can easily reduce group cohesion in the future.&lt;/p>
&lt;p>Another common model for collaboration is simply doing the entire assignment together. This obviously rectifies any inequalities resulting from splitting the work, but it also completely eliminates most of the advantages of working in a group. A group working together for the entire assignment is essentially just solo work with group members cross-checking each other, and with drastically limited meeting times. My partner and I were both very busy people, and I would dare say that neither of us strictly needed the other to get hundreds on each of the assignments. Because of this, we based our approach on the more conventional model of splitting the workload, with some caveats.&lt;/p>
&lt;p>Our workflow for collaborating on homework had three main principles, each of which roughly corresponded to a phase of our process. Our goals were threefold: to reduce our workloads, to miss as few learning opportunities as possible, and to ensure that our individual standards for quality were satisfied.&lt;/p>
&lt;p>The first principle of the strategy we adopted was that any learning in the homework assignment should be serialized. That is, we had to ensure that any key content was experienced by both of us, simultaneously, so we could both have the experience of actively thinking about and solving each problem. To accomplish this, my partner and I would either meet in person or call over Zoom the night after each homework assignment was released. During these meetings, we worked through the entire assignment together, looking to find the key insights for each question and note them down for later. We took notes and screenshots of these &amp;ldquo;sketches&amp;rdquo; of the proofs and algorithms we would later write.&lt;/p>
&lt;p>Second, we sought to parallelize the &amp;ldquo;grunt work&amp;rdquo; of writing proper pseudocode and formal proofs for all of our sketches from earlier. At the end of our calls, we divided the assignment between ourselves, taking into account our relative proficiencies and the difficulty of each problem. Over the next week, we would separately make contributions to a shared LaTeX document, steadily completing the assignment.&lt;/p>
&lt;p>The third and most important principle of our workflow was to share full accountability for all the work we submitted jointly. We achieved this by thoroughly examining our entire solution and ensuring that everything was up to both of our standards. We made changes as needed to ensure that we were both comfortable with what we were about to hand in and implicitly agreed that, if we lost marks on anything, the fault would lie with both of us, not just the original author of the error.&lt;/p>
&lt;p>I&amp;rsquo;m under no delusion that this is a particularly deep insight. Indeed, I&amp;rsquo;ve practiced variations of it for my entire university career. That said, I decided it was worth a quick write-up after participating in many redundant conversations about the supposed incompatibility between group work and learning from homework, or between group work and getting a good mark. With a rather simple change in workflow, I found that they are quite compatible. By serializing learning, parallelizing grunt work, and sharing accountability, virtually all of the usual issues with group problem sets can be made to vanish.&lt;/p></description></item><item><title>Project Fëanor</title><link>https://alexdsteele.com/project/project-feanor/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/project-feanor/</guid><description>&lt;p>Project Fëanor was my term project for PHYS 319: Electronics Laboratory. I designed a quadcopter using mostly 3D-printed parts and used the MSP430 microcontroller as a flight controller, while working within its limited 512 bytes of RAM and 16 kilobytes of memory. To control the four motors, I wrote C code that interfaced with an accelerometer over I2C and accepted commands from a laptop over UART.&lt;/p></description></item><item><title>Reading</title><link>https://alexdsteele.com/reading/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/reading/</guid><description>&lt;p>In my free time, I enjoy reading books, primarily (but, by no means, exclusively) fantasy, science fiction, and historical non-fiction. Here are some of my favourites, in no particular order:&lt;/p>
&lt;ul>
&lt;li>J.R.R. Tolkien&amp;rsquo;s legendarium (&lt;em>The Hobbit&lt;/em>, &lt;em>The Lord of the Rings&lt;/em>, &lt;em>The Silmarillion&lt;/em>, &lt;em>The Children of Húrin&lt;/em>, &lt;em>Beren and Lúthien&lt;/em>, &lt;em>The Fall of Gondolin&lt;/em>, and &lt;em>Unfinished Tales of Númenor and Middle-Earth&lt;/em>)&lt;/li>
&lt;li>&lt;em>The Wheel of Time&lt;/em> series, by Robert Jordan&lt;/li>
&lt;li>Frank Herbert&amp;rsquo;s &lt;em>Dune&lt;/em> Saga&lt;/li>
&lt;li>Andy Weir&amp;rsquo;s works (&lt;em>The Martian&lt;/em>, &lt;em>Artemis&lt;/em>, and &lt;em>Project Hail Mary&lt;/em>)&lt;/li>
&lt;li>&lt;em>Animal Farm&lt;/em> and &lt;em>Nineteen Eighty-Four&lt;/em>, by George Orwell&lt;/li>
&lt;li>&lt;em>Hamlet&lt;/em> and &lt;em>Macbeth&lt;/em>, by William Shakespeare&lt;/li>
&lt;li>&lt;em>Pride and Prejudice&lt;/em>, by Jane Austen&lt;/li>
&lt;li>&lt;em>A Tale of Two Cities&lt;/em>, by Charles Dickens&lt;/li>
&lt;li>&lt;em>Moby-Dick&lt;/em>, by Herman Melville&lt;/li>
&lt;li>&lt;em>Pygmalion&lt;/em>, by George Bernard Shaw&lt;/li>
&lt;li>&lt;em>The Great Gatsby&lt;/em>, by F. Scott Fitzgerald&lt;/li>
&lt;li>&lt;em>To Kill a Mockingbird&lt;/em>, by Harper Lee&lt;/li>
&lt;li>&lt;em>Metternich: Strategist and Visionary&lt;/em>, by Wolfram Siemann&lt;/li>
&lt;li>&lt;em>The Guns of August&lt;/em>, by Barbara W. Tuchman&lt;/li>
&lt;li>&lt;em>The Second World War: A Complete History&lt;/em>, by Martin Gilbert&lt;/li>
&lt;li>&lt;em>The Years of Lyndon Johnson&lt;/em>, by Robert Caro&lt;/li>
&lt;li>&lt;em>Becoming&lt;/em>, by Michelle Obama&lt;/li>
&lt;li>&lt;em>A Promised Land&lt;/em>, by Barack Obama&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m currently reading:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Snow &amp;amp; Steel: The Battle of the Bulge, 1944&amp;ndash;45&lt;/em>, by Peter Caddick-Adams&lt;/li>
&lt;li>&lt;em>Death on the Nile&lt;/em>, by Agatha Christie&lt;/li>
&lt;/ul></description></item><item><title>How Fast Is a Nuclear Baseball?</title><link>https://alexdsteele.com/post/how-fast-is-a-nuclear-baseball/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/post/how-fast-is-a-nuclear-baseball/</guid><description>&lt;p>UBC&amp;rsquo;s annual Physics Olympics just happened yesterday. Every year, high schools from across British Columbia send teams of students to compete in a series of physics-themed events. There are a couple of pre-built events, where students design some contraption; a lab event, where they need to apply what they learned to measure some quantity experimentally; Quizzics, where students answer rapid-fire physics and astronomy-related trivia; and Fermi questions, where they apply their knowledge of physics to give order-of-magnitude estimates for various fun problems.&lt;/p>
&lt;p>Fermi questions are named after the Italian-American physicist Enrico Fermi, who was famously able to provide order-of-magnitude estimates for seemingly impossible-to-compute figures, like the number of piano tuners in New York City, the blast yield of the Trinity test, or the number of intelligent civilizations in the galaxy with which we could potentially communicate. The objective is to come up with a series of trivial estimates that can be multiplied together to obtain a decent estimate of a highly non-trivial problem.&lt;/p>
&lt;p>The Fermi questions were always my favourites back when I competed in high school. For the past three years, I&amp;rsquo;ve helped design and test them. This usually involves me and &lt;a href="https://rioweil.github.io/" target="_blank" rel="noopener">Rio Weil&lt;/a> coming up with a bunch of ideas for different quantities to estimate, then trying to determine different ways to arrive at them. Our criteria for good questions is that they must be non-elementary, robust, and doable on a calculator. By non-elementary, we just mean that it&amp;rsquo;s not a question one would see in a high school physics textbook where a student could just use a known formula and constants, together with given quantities, to obtain an answer. The solver needs to make a non-obvious estimate, or apply some sort of university-level knowledge. Robustness is determined by whether or not different approaches converge to the same answer. This usually isn&amp;rsquo;t a problem when questions are specifically-worded enough, but it can still be problematic if the solution is highly sensitive to how one chooses to model the problem. Finally, since students aren&amp;rsquo;t allowed calculators, we try to ensure that the questions don&amp;rsquo;t rely on any transcendental functions (save for the trigonometric functions that everyone has memorized) or complicated square roots.&lt;/p>
&lt;p>We usually come up with a set of problems that trend upward in difficulty. The first question is usually a matter of making one or two (possibly slightly unintuitive) estimates and combining them using simple formulas from high school physics. The last question, however, will typically require students to come up with a more complex model or have knowledge of advanced physics (that a particularly keen AP or IB student might be expected to have).&lt;/p>
&lt;p>I thought it would be interesting to walk through the process of designing a problem. Since all of the problems from yesterday&amp;rsquo;s event were solved live by Jeorg Rottler at the end of the day, we&amp;rsquo;ll look at a question that Rio and I tried to make work for a while, but ended up putting aside.&lt;/p>
&lt;p>The inspiration for this question came from the &lt;a href="https://what-if.xkcd.com/1/" target="_blank" rel="noopener">&amp;ldquo;Relativistic Baseball&amp;rdquo;&lt;/a> article on xkcd&amp;rsquo;s &lt;em>What If?&lt;/em> blog. I was curious about how quickly a baseball would need to be thrown to replicate the effects described in the article (namely, a small nuclear blast). To be more concrete, I phrased the question as follows:&lt;/p>
&lt;blockquote>
&lt;p>How fast would one need to throw a baseball in order for its impact to release as much energy as the atomic bomb dropped on Hiroshima? Assume no air resistance.&lt;/p>
&lt;/blockquote>
&lt;p>The question, in its current state, requires the estimation of two quantities: the mass of a &lt;a href="https://en.wikipedia.org/wiki/Baseball_%28ball%29" target="_blank" rel="noopener">baseball&lt;/a> and the yield of &lt;a href="https://en.wikipedia.org/wiki/Little_Boy" target="_blank" rel="noopener">Little Boy&lt;/a>. This alone does not make for an interesting problem. However, I was hoping that, like in xkcd, special relativity would come into play.&lt;/p>
&lt;p>In classical mechanics, the kinetic energy of an object is given by the expression $\frac{1}{2} m v^2$, where $m$ is the mass of the object and $v$ is its velocity. Therefore, solving this problem classically is simply a matter of substituting one&amp;rsquo;s estimates into $v = \sqrt{\frac{2E_{\text{blast}}}{m}}$, where $E_{\text{blast}}$ is the yield of the Hiroshima bomb. However, when $v$ is close to the speed of light, this relation breaks down and we must, instead, turn to special relativity.&lt;/p>
&lt;p>The total relativistic energy of an object is given by $\gamma m c^2$, where $\gamma = \frac{1}{\sqrt{1 - \frac{v^2}{c^2}}}$ is the so-called Lorentz factor, which is equal to $1$ for a stationary object and diverges to infinity as $v$ approaches $c$, the speed of light. To obtain the object&amp;rsquo;s relativistic kinetic energy, we simply subtract off its rest mass energy $E_0 = mc^2$ (this is obtained from the total relativistic energy formula by setting $v = 0$) and obtain $T = E - E_0 = (\gamma - 1) m c^2$ (as a fun exercise, one can derive the classical $T = \frac{1}{2} m v^2$ by taking a first-order Taylor approximation of this quantity). Note that we are using relativistic kinetic energy, not total energy. The rest mass energy of a baseball is enough for several hundred Hiroshima bombs, and the question never states that the baseball will be disintegrated down to its last atom. Rearranging to solve for $v$, we find:&lt;/p>
&lt;p>$$\begin{align}
T = E_{\text{blast}} &amp;amp;= (\gamma - 1) m c^2 \newline
\frac{E_{\text{blast}}}{m c^2} + 1 &amp;amp;= \gamma \newline
\frac{E_{\text{blast}}}{m c^2} + 1 &amp;amp;= \frac{1}{\sqrt{1 - \frac{v^2}{c^2}}} \newline
\frac{1}{\frac{E_{\text{blast}}}{m c^2} + 1} &amp;amp;= \sqrt{1 - \frac{v^2}{c^2}} \newline
\frac{1}{\left(\frac{E_{\text{blast}}}{m c^2} + 1\right)^2} &amp;amp;= 1 - \frac{v^2}{c^2} \newline
1 - \frac{1}{\left(\frac{E_{\text{blast}}}{m c^2} + 1\right)^2} &amp;amp;= \frac{v^2}{c^2} \newline
\frac{\left(\frac{E_{\text{blast}}}{m c^2} + 1\right)^2 - 1}{\left(\frac{E_{\text{blast}}}{m c^2} + 1\right)^2} &amp;amp;= \frac{v^2}{c^2} \newline
c \cdot \frac{\sqrt{\left(\frac{E_{\text{blast}}}{m c^2} + 1\right)^2 - 1}}{\frac{E_{\text{blast}}}{m c^2} + 1} &amp;amp;= v
\end{align}$$&lt;/p>
&lt;p>Needless to say, the use of special relativity propels this problem from being too easy to be the first question to being a potential final problem, just by virtue of it requiring knowledge of relativistic energy.&lt;/p>
&lt;p>However, we still have not determined whether the desired appreciable distinction between the two approaches actually exists. Solving classically, we find a velocity of $2.8927 \times 10^{7} \text{ m/s}$. Using special relativity, we instead obtain $2.8826 \times 10^{7} \text{ m/s}$. While one could fairly easily use this question in a setting where calculators are allowed, three digits of precision is too much to ask for on a Fermi question. The differences between speeds calculated using slightly different bomb yields would be far greater than the difference between the classical and relativistic approaches.&lt;/p>
&lt;p>I resolved this problem by changing the energy we were comparing against. Instead of Little Boy, I substituted the energies released by the &lt;a href="https://en.wikipedia.org/wiki/Tsar_Bomba" target="_blank" rel="noopener">Tsar Bomba&lt;/a> (50 megatonnes), the &lt;a href="https://en.wikipedia.org/wiki/1883_eruption_of_Krakatoa" target="_blank" rel="noopener">Krakatoa eruption&lt;/a> (200 megatonnes), and the &lt;a href="https://en.wikipedia.org/wiki/Chicxulub_crater" target="_blank" rel="noopener">asteroid impact&lt;/a> that is hypothesized to have caused the dinosaurs&amp;rsquo; extinction (100 teratonnes). All of these energy releases result in massive differences between the classical and relativistic results. The classical results are impossibly large (i.e. faster than the speed of light), while the relativistic results converge to values slightly lower than the speed of light.&lt;/p>
&lt;p>However, this brings us to another issue of precision, as the correct values would be virtually indistinguishable from the speed of light with only one or two digits of precision. A student could just calculate a speed of $1.6701 \times 10^{9} \text{ m/s}$ (for equivalence to the Tsar Bomba) classically, note that his or her result is much greater than the speed of light, and then simply guess $2.998 \times 10^{8} \text{ m/s}$ without doing any of the relativistic calculations that we just covered.&lt;/p>
&lt;p>For this question to work, two criteria had to be met. First, there must be a classical error significant enough to notice at one digit of precision, such that taking the relativistic approach is rewarded. Second, the relativistic speed must be distinguishable from the speed of light. Also, it would be nice if the classical speed was less than the speed of light, to make the need for using relativity non-obvious. After &lt;a href="https://www.desmos.com/calculator/d1b5wlk9uj" target="_blank" rel="noopener">some messing around on Desmos&lt;/a>, I determined that 5.581 megatonnes was about ideal, with a factor of two separating the relativistic and classical results. This still gave us a relativistic result of $0.931c$, with a classical result well over the speed of light, however.&lt;/p>
&lt;p>In theory, this question could still have been a candidate. It would have a pretty glaring weakness in that simply guessing the speed of light would likely give at least part marks (for first digit accuracy), but that isn&amp;rsquo;t highly likely to occur to a student with a time limit of five minutes. However, the last nail in its coffin was that there just wasn&amp;rsquo;t anything all that interesting that released 5.581 megatonnes of energy. Anything we could come up with that wasn&amp;rsquo;t incredibly obscure required several more layers of estimations that the students probably wouldn&amp;rsquo;t have time to make. For this reason, we ended up scrapping the nuclear baseball question in favour of others.&lt;/p>
&lt;p>That was a brief overview of the design and testing process that goes into writing a Fermi question, along with some hopefully interesting physics. If you happen to be a UBC student in the physics department (or even one outside it with an interest in physics) and you found this compelling, consider volunteering to help organize the Physics Olympics next year. More ideas (and hands) are always welcome.&lt;/p></description></item><item><title>Au Delà</title><link>https://alexdsteele.com/project/au-dela/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/au-dela/</guid><description>&lt;p>Our project explores the use of GPT-3&amp;rsquo;s comprehension of code semantics in the setting of CS education. It has two components: a semantic autograder for teachers and a suite of code conversion/documentation tools for students.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;h3 id="teacher">Teacher&lt;/h3>
&lt;p>The main functionality of our project is the semantic autograder. Classically, autograders rely on black-box testing. This approach obviously works well for tasks like grading problem sets and exams but falls short in some other settings. Studies show that active participation in lectures boosts learning outcomes. To encourage this, profs might have students submit code for autograding live in lectures to incentivize participation. However, this can backfire, as the autograder forces students to write perfect code while also being introduced to a topic for the first time, which distracts them from actually learning.&lt;/p>
&lt;p>Ideally, an autograder would be able to tell that a student is writing code that, while not necessarily correct, shows that they understand the problem and roughly know what a solution might look like. To fill this void, we designed a semantics-based autograder. It uses GPT-3 to look at the contents of a student&amp;rsquo;s code submission and determine how closely it resembles a solution for the given problem. The benefits of using a natural language model, rather than classical text parsing and diffing, to solve this problem are manifest. First, the semantic autograder is able to extract meaning, rather than just structure, from code. This prevents false negatives from similar-looking functions, which can easily arise when a course enforces a common template for certain functions. It also prevents false positives when a problem allows for extremely diverse solutions that can vary wildly from what the instructor expects while still solving the problem.&lt;/p>
&lt;h3 id="student">Student&lt;/h3>
&lt;p>In order to guide students in their code implementation and debugging process, our program offers 6 different functions. There are bug fixers, docstring generators and tools to improve code quality and conciseness by converting length for-loops into compact maps or list comprehensions. The docstring generator is very helpful for students to understand the functionality of cryptic and poorly documented code. Moreover, the time complexity calculator can be used as a revision tool by CS students.&lt;/p>
&lt;p>&lt;em>&lt;strong>Fix Code:&lt;/strong>&lt;/em> Fixes syntactical errors in python code&lt;/p>
&lt;p>&lt;em>&lt;strong>Time Complexity:&lt;/strong>&lt;/em> Computes the time complexity of submitted snippet&lt;/p>
&lt;p>&lt;em>&lt;strong>Py Docstring:&lt;/strong>&lt;/em> Generates a Doc string for code&lt;/p>
&lt;p>&lt;em>&lt;strong>Loop to PyStream:&lt;/strong>&lt;/em> Converts Python for loops into streams&lt;/p>
&lt;p>&lt;em>&lt;strong>Loop to List:&lt;/strong>&lt;/em> Deduces the functional programming solution for a given algorithmic solution&lt;/p>
&lt;p>&lt;em>&lt;strong>List to Loop:&lt;/strong>&lt;/em> Deduces the iterative solution for a complementary functional programming solution&lt;/p>
&lt;h2 id="technology">Technology&lt;/h2>
&lt;p>Our implementation uses OpenAI&amp;rsquo;s Python API and a Flask backend. We considered using Django but felt that it was unncessarily heavy for our use case.&lt;/p>
&lt;h2 id="running">Running&lt;/h2>
&lt;p>Unfortunately, OpenAI doesn&amp;rsquo;t allow projects using GPT-3 to be published without approval, which takes around two weeks. We are, however, allowed to share pre-generated results, as we did in our demonstration video. Additionally, if you have an API key, you are free to run our code and verify our results. Simply clone the repository, add your key as an environment variable named &lt;code>OPENAI_API_KEY&lt;/code>, and run &lt;code>comparisons/comparison_functions.py&lt;/code>. Here are the expected results:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">fibonacci/starter.py: (105.779, 48.065, -57.714); Passing = False
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fibonacci/submission_random_garbage.py: (4.357, 3.657, -0.7000000000000002); Passing = False
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fibonacci/submission_wrong_function.py: (25.971, 18.292, -7.6789999999999985); Passing = False
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fibonacci/submission_recur.py: (25.715, 33.526, 7.8110000000000035); Passing = True
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fibonacci/submission_invalid.py: (18.612, 37.666, 19.054); Passing = True
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fibonacci/submission_indent_error.py: (11.573, 60.106, 48.533); Passing = True
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fibonacci/solution.py: (10.018, 57.529, 47.511); Passing = True
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bintree/starter.py: (14.276, 7.852, -6.4239999999999995); Passing = False
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bintree/submission_iterative.py: (1.316, 3.952, 2.636); Passing = True
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bintree/submission_alternative.py: (3.74, 5.479, 1.7389999999999999); Passing = True
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bintree/solution.py: (1.539, 7.248, 5.7090000000000005); Passing = True
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As we can see, handing in either starter file fails, as does typing random Python code or solving the wrong problem. However, all of the partial attempts at a solution get credit, which is what we want.&lt;/p></description></item><item><title>No Plan Survives Contact With the Enemy</title><link>https://alexdsteele.com/post/no-plan-survives-contact-with-the-enemy/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/post/no-plan-survives-contact-with-the-enemy/</guid><description>&lt;p>Several months ago, I arranged a time to work on a group assignment with another student. After we agreed, I watched him open up his Google Calendar and reveal a many-coloured wall of events spanning the entire week, often continuously from 08:00 to 23:00. As someone who thinks of himself as quite organized and methodical, seeing this left something of an impression on me, as I had never gone into that much detail when scheduling my days before. I first thought it was ridiculous. However, I soon wondered whether adopting such a practice would benefit my studies, why I had decided to go as far as I did down the scheduling rabbit hole, and why I had not gone any further than that. After careful consideration, I can conclude that my gut reaction was correct and that his system is utterly ineffective.&lt;/p>
&lt;p>I first adopted Google Calendar during orientation at the start of first year, to keep track of all of the orientation group meetings, mock lectures, and social events to attend. I found it rather helpful and decided to continue using it throughout first year. I entered all my classes, exams, and office hours into separate calendars and also used a calendar to store events like group study sessions or social gatherings. However, I never blocked out time for assignments or projects. I kept track of all deadlines in Google Tasks, so they&amp;rsquo;d neatly render on top of my schedule for the week, but I never set aside an hour for a physics assignment or two for a computer science problem set. I never committed to spending four hours reviewing the day before an exam. Doing so would fundamentally conflict with my aim of maximizing my overall average. To explain why, we must first go back a couple of years, then another one hundred and fifty.&lt;/p>
&lt;p>In the summer of 2019, shortly after I had finished secondary school, I travelled to Europe for the first time with my family. While there, we visited London, Berlin, and Paris for five to seven days each (along with day trips to several other cities). In Berlin, in the heart of Tiergarten, the city&amp;rsquo;s largest urban park (assuming one does not count the remnants of Templehof Airport as a true park), there stand three statues of the three Prussian statesmen who forged the German Empire. The &lt;a href="https://en.wikipedia.org/wiki/Bismarck_Memorial" target="_blank" rel="noopener">statue of Otto von Bismarck&lt;/a>, the Minister-President of Prussia, looms the largest. Nearby, however, stand two other statues: those of Albrecht von Roon, the Prussian Minister of War, and Helmuth von Moltke, the Chief of the Prussian General Staff.&lt;/p>
&lt;p>
&lt;figure id="figure-statue-of-helmuth-von-moltke-in-berlins-tiergarten">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Statue of Helmuth von Moltke in Berlin&amp;amp;rsquo;s Tiergarten" srcset="
/post/no-plan-survives-contact-with-the-enemy/20190722_122023_hu65c2258dd0cfdc1d172a7dc9c3d7b1a0_1742800_b42716640f5357b5d8345d060958e095.webp 400w,
/post/no-plan-survives-contact-with-the-enemy/20190722_122023_hu65c2258dd0cfdc1d172a7dc9c3d7b1a0_1742800_d25715f679bc2c78c39df1ec40f7884b.webp 760w,
/post/no-plan-survives-contact-with-the-enemy/20190722_122023_hu65c2258dd0cfdc1d172a7dc9c3d7b1a0_1742800_1200x1200_fit_q100_h2_lanczos.webp 1200w"
src="https://alexdsteele.com/post/no-plan-survives-contact-with-the-enemy/20190722_122023_hu65c2258dd0cfdc1d172a7dc9c3d7b1a0_1742800_b42716640f5357b5d8345d060958e095.webp"
width="760"
height="736"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Statue of Helmuth von Moltke in Berlin&amp;rsquo;s Tiergarten
&lt;/figcaption>&lt;/figure>
&lt;/p>
&lt;p>Bismarck, the great diplomat, was flanked by these two men of war because Germany was not unified diplomatically, as Great Britain had been, but instead by, in his own words, &amp;ldquo;iron and blood&amp;rdquo;. Three wars in the latter half of the nineteenth century propelled Prussia to hegemony: the Dano-Prussian War (often called the Second Schleswig War), the Austro-Prussian War, and the Franco-Prussian War. Roon and especially Moltke were responsible for the military reforms that allowed Prussia and its allies to quickly achieve their aims in those three conflicts.&lt;/p>
&lt;p>Molke was a man obsessed with military planning. As Chief of Staff, he oversaw the writing of formal studies of historical conflicts and current politics, so the General Staff could make better, more relevant plans for Prussia&amp;rsquo;s future wars. He was an early adopter of the railway and the telegraph for military use, correctly reasoning that if a nation could effectively marshal its railway infrastructure to transport its armies at the outbreak of war, it would have an immense early advantage in the ensuing campaign. Despite all this, however, Moltke is likely most famous in the English-speaking world for one quote:&lt;/p>
&lt;blockquote>
&lt;p>The tactical result of an engagement forms the base for new strategic decisions because victory or defeat in a battle changes the situation to such a degree that no human acumen is able to see beyond the first battle. [&amp;hellip;] Therefore no plan of operations extends with any certainty beyond the first contact with the main hostile force.&lt;/p>
&lt;/blockquote>
&lt;p>This mouthful of a motto is often simply paraphrased as &amp;ldquo;No plan survives contact with the enemy&amp;rdquo;. Moltke believed that pre-existing military plans lost much of their value as soon as they were put into action. (Whether he was influenced by the works of Robert Burns when he arrived at this conclusion is unknown to me.) Why, then, did so much of Moltke&amp;rsquo;s tenure consist of making such plans? In the words of President Dwight Eisenhower, &amp;ldquo;plans are useless but planning is indispensable&amp;rdquo;. Plans can never be counted upon, but the process by which they are made is essential preparation.&lt;/p>
&lt;p>You will almost certainly never make a plan that correctly accounts for every possible factor that could change. (If you do, you ought to be inclined to either play the lottery or never play it again, if you exhibit the hot hand fallacy or the gambler&amp;rsquo;s fallacy, respectively.) Instead, the key to preparedness is to have several plans that you can readily switch between, alter, and combine as circumstances change. Naturally, military affairs and schoolwork differ in innumerable ways, but these two quotes and the ideas behind them map onto the problem of planning out homework and studying quite nicely.&lt;/p>
&lt;p>Quite frankly, I have no idea how long most tasks will take to complete. I can hardly count the number of times I expected to blitz through a homework assignment in an afternoon, only to require a whole week&amp;rsquo;s effort to solve the last problem, or the number of times I expected to spend a full day internalizing a concept only to find that I understood it in half an hour. If I can&amp;rsquo;t be counted on to get that estimate right, how could I possibly plan to spend exactly four hours finishing four assignments in sequence, then spend another two hours doing all of my studying for a coming midterm? The simple answer is that I don&amp;rsquo;t. My policy for the past two years has been to only ever plan my academic activities one to two days in advance, in very broad strokes, and non-committally (note that this last point, especially, only applies to solo studying). When homework or an exam is announced, I note the date or deadline, take a cursory look at my schedule to see what sort of room I have to work with (taking work for my other courses into account), and go from there.&lt;/p>
&lt;p>In my experience, this sort of loose planning carries the best of both worlds. It&amp;rsquo;s enough to get me to sit down and start working, but then I&amp;rsquo;m free to adapt as needed. If I nail down a concept for an upcoming quiz early, I move on to some other work and maybe do one last quick review at the end of the evening. If I&amp;rsquo;m struggling, I can allocate extra time or delay, as needed. If I have an epiphany for an unrelated assignment, I can pivot to that. As circumstances change, so do my plans.&lt;/p>
&lt;p>Given all of this, one may wonder why individuals like the one whose calendar I glimpsed organize themselves in this way. There are certainly some who do it simply to motivate themselves. It is typically better to spend an hour forcing yourself to study linear algebra than it is to spend that same hour procrastinating. If that is what inordinately rigid scheduling provides for some people, I don&amp;rsquo;t aim to belittle their choice to use it at all. The cases that interest me are those where people I consider to be highly motivated and productive still end up doing this to themselves. Unless I chronically misjudge how much others rely on scheduling out their work to force themselves to get it done, they have no real need to meticulously plan out when they will complete which tasks.&lt;/p>
&lt;p>It seems to me that, for many people, this sort of excessive scheduling serves primarily to create an aesthetic of organization and productivity, either for the consumption of others or themselves. It&amp;rsquo;s not unlike when people post pictures of their course notes written in beautiful cursive in premium notebooks. Whether or not people actually follow their schedules laden with study sessions or even use their artistically-rendered notes is irrelevant. They were created, consciously or not, as a performance: propaganda. Looking back, probably the only reason I even had that multi-coloured wall of calendar events shoved in my face in the first place was that its author was proud of it. More than anything else, it reminds me of Matthew 6:16-18. That said, not everyone&amp;rsquo;s aims are so nakedly self-aggrandizing and, for some, being able to think of themselves as highly organized and productive is a valuable confidence boost. For me, while I can see the appeal of convincing myself that I am more capable than I am (indeed, I am guilty of doing this right before I begin exams), as I get older, I increasingly see the value in honest reflection on my habits and my capabilities, rather than admittedly useful self-deception which one must maintain for an entire term.&lt;/p>
&lt;p>In the end, unexpected breakthroughs and setbacks are inevitable, and there is little purpose in trying to have every detail planned out save for making it appear that you have every detail planned out. That sort of rigidity only serves to let you follow in the footsteps of the Danish, Austrian, and French armies of the mid to late nineteenth century.&lt;/p></description></item><item><title>Project Lance</title><link>https://alexdsteele.com/project/project-lance/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/project-lance/</guid><description>&lt;p>In order to give myself some more tactile experience working with machine learning, I challenged myself to create a bot capable of competing in Generation I Pokemon battles. However, training the bot would still take forever with the only existing option - running a local Pokemon Showdown server and interfacing with it. To solve this problem, I devised Project Lance: a locally-run Python implementation of Generation I Pokemon battles. With it, I was able to run about 2000 full battles per second on my CPU, as opposed to the couple dozen I could run by interfacing with Showdown in that same time. To further improve training speed, I implemented a multicore evaluator for self-play. This allowed me to train a &lt;a href="https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies" target="_blank" rel="noopener">NEAT&lt;/a> model to play optimally on a simplified version of the full battle engine.&lt;/p></description></item><item><title>Reflections on Honours Linear Algebra</title><link>https://alexdsteele.com/post/reflections-on-honours-linear-algebra/</link><pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/post/reflections-on-honours-linear-algebra/</guid><description>&lt;p>A week or so after my exams finish each term, I find it helpful to write up a brief after action report of sorts for each of my courses, in which I reflect on how effective my various studying practices were. They&amp;rsquo;re usually each just a couple of pages of bullet points or, at best, disconnected paragraphs that I use when planning out how I will spend my time in future terms. However, in addition to all the expected ups and downs of online learning, my most recent term included my largest upward mark swing in a specific subject so far at UBC. Ergo, I thought it appropriate to formalize my notes on the factors contributing to my performance in MATH 223: Honours Linear Algebra, in an attempt to learn all available lessons from my experiences this term and formalize a strategy to utilize them going forward.&lt;/p>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>Before discussing MATH 223, some context is necessary. 223 was not my first experience in an honours mathematics course. Before beginning post-secondary, I was among the strongest math students in my high school. In my enriched pre-calculus and AP Calculus classes, I routinely earned marks in the high nineties and even the occasional hundred, consistently placed among the top scorers in my school in the University of Waterloo math contests, and occasionally helped coach the Math Challengers team in problem-solving techniques. In short, as far as I knew, I was rather strong in mathematics. Consequently, when picking my courses for my first year at UBC, I elected to take MATH 120: Honours Differential Calculus, thinking that it would be a natural progression from high school and that, although it would be a noticeable step up, I would be able to handle it with a moderate level of effort. This presumption proved to be inaccurate.&lt;/p>
&lt;p>The term started rather well. I found the topics covered challenging but fun. It was a new kind of math and a welcome change of pace from the computational grind of AP Calculus. Going into the first midterm, I had an average of 96% on the first three assignments. I believed that I was quite familiar with the material and would perform relatively well. I wrote the exam and felt my predictions had been accurate. I wasn&amp;rsquo;t expecting a hundred, but I thought I understood all the questions and gave reasonable answers.&lt;/p>
&lt;p>I was walking across campus one afternoon when my phone buzzed with a notification. It was an email notification from Canvas stating that marks had been posted for the midterm. I clicked on the link, logged in, and saw the first and only C+ that I ever obtained on an exam. The F average was of little consolation. It was blindsiding, it was embarrassing, and it left a scar of self-doubt that would last for the next fourteen months. I had thought that I was adept, if not strong, with the course&amp;rsquo;s material thus far. When I saw my graded exam, I didn&amp;rsquo;t see a glut of clerical errors; I saw a series of misunderstandings of concepts, which further compounded my disgust with myself. Every point lost was a massive failure of my studying policies. I knew that major reforms were in order. However, it was too late to fully recover my MATH 120 grade.&lt;/p>
&lt;p>I was able to reverse course over the next month and a half, but that exam dropped my course grade enough to result in my only A- in a course at UBC, and my only non-A+ in a course in what I would consider one of my core subjects (computer science, physics, and mathematics).&lt;/p>
&lt;p>Despite this experience, I signed up for MATH 223: Honours Linear Algebra the following summer. I had been told that the course was more or less necessary if one wished to have a thorough understanding of concepts in upper-year courses, particularly quantum mechanics and machine learning. Deep down, I probably also wanted to prove to myself that the barely-mitigated disaster of MATH 120 was behind me. I knew that it would not be an easy four months. However, this time, I would be prepared.&lt;/p>
&lt;p>That summer, I began reading ahead and formulating plans on what my studying and homework habits would look like come September. MATH 120 had been my impetus for beginning to write after-action reports like this one, which meant that I had a wealth of notes on and analyses of my study habits from first year. With them, I devised a list of failings that would have to be corrected going forward.&lt;/p>
&lt;p>The four great mistakes that I took note of were that I had relied too much on my peers, been convinced by my own faulty arguments, lacked a single resource to consult when studying, and overfocused on practice problems to the detriment of general understanding. To amend each of these issues in my study habits, I had to reflect on how I went wrong in MATH 120 and how I would fix things in MATH 223.&lt;/p>
&lt;h2 id="go-it-alone">Go it alone.&lt;/h2>
&lt;p>In the first lecture of MATH 120 and more than a few of my other first-year courses, the professor made a point of encouraging us to discuss homework problems with each other (with the obvious caveat that our work had to be our own). In hindsight, this advice was damaging to my final grade and devastating to many of my classmates&amp;rsquo;. Particularly in honours mathematics, one of homework assignments&amp;rsquo; primary purposes is building an intuition for the sort of problem-solving that students will be expected to do in a given course. When a student works with classmates to come up with the key insight for a problem and then writes a full proof alone, he or she only serves to spoil the solution and evade a good exercise. Additionally, due to a selection bias in the problems students work together on, the hardest problems are disproportionately avoided. This leads to crippling deficiencies manifesting in an exam setting.&lt;/p>
&lt;p>I was by no means the largest victim of this approach in MATH 120, but it did still negatively affect my learning. With this in mind, I set a new policy for myself. No longer would I work on homework with classmates (or at least not with people in the classes whose homework I was working on). There would be no hints from Piazza or discussions in group chats. Studying with others would be permissible, but every homework problem would have to be solved alone.&lt;/p>
&lt;p>Because of this rule, the weekly office hours on Wednesday and Thursday served as a hard deadline for a rough draft (more on this later) of my solution for the week&amp;rsquo;s problem set (otherwise I would hear about other students&amp;rsquo; solutions during office hours), which would be due Friday night. This early deadline had the benefit of shielding me from most of the chatter from classmates asking each other about the homework that would come closer to the actual deadline.&lt;/p>
&lt;p>One obvious drawback of this approach was that it made working through problem sets and studying much more solitary. Fortunately, through a chance occurrence at the start of the term, I began to have study calls over Zoom with an acquaintance (who became a rather close friend over the course of the term) from my design team. Despite not sharing any courses with her, it was extremely helpful to have someone to encourage me to stay accountable (both in my studying and my then-ongoing search for my first co-op job) and, of course, to chat with on occasion.&lt;/p>
&lt;p>Preventing myself from contacting my classmates until I completed the week&amp;rsquo;s homework was quite possibly the hardest change I had to make to my workflow. While I believe it contributed in no small manner to my success in the course, I found it to be rather isolating and draining. The shared sense of struggle on the assignments back in MATH 120 led to me developing fairly close relations with many of my classmates, something on which I feel I missed out, especially in this online year. I think it may be a better idea to allow myself some more homework-related discussions with my classmates, so long as I try to come up with the main ideas myself beforehand.&lt;/p>
&lt;h2 id="solve-before-you-explain">Solve before you explain.&lt;/h2>
&lt;p>In several of my first-year courses, we were encouraged early on to learn LaTeX and use it for our homeworks. In hindsight, I was slightly overenthusiastic in my adoption of it. Instead of using LaTeX for a &amp;ldquo;good copy&amp;rdquo;, I would start my homework by copying the provided &lt;code>.tex&lt;/code> file, adding a section for solutions, and solving as I typeset. This worked (and, in fact, aligns with how I still write prose), but it was suboptimal. By solving the problems in my LaTeX editor, I was hampering my ability to properly build up a solution that I could be fully confident in.&lt;/p>
&lt;p>In MATH 223, I devised a new strategy, one which transformed completing an assignment from a single task that is completed over the course of one or two days to a three-step process that plays out over the course of a week. The problem with my old approach was that it lent itself well to a sort of confirmation bias or self-deception. By writing the good copy as I was solving the problem, I was thinking of and writing down arguments for the validity of my solution without having verified it. This made it easier for mistakes to slip through. An improved process would have to decouple the mathematics from the argument, To do this, I &amp;ldquo;solved&amp;rdquo; each homework problem three times.&lt;/p>
&lt;p>First, I tried to write down a rough sketch of a proof with just the key insights. I looked at the week&amp;rsquo;s assignment the night it was posted and two or three times each subsequent day until it was solved. Whenever I had a novel idea, I jotted it down. This was usually done in pencil on a sheet of scrap paper, or, in one instance, on Google Keep while on a ride back from the orthodontist. Once I had that sketch, I put it away for at least a few hours. After some time had passed, I came back to my note and, if I still thought it was sound (or at least was likely sound), I began the second phase.&lt;/p>
&lt;p>Once I had an idea of which direction to take my proof, I needed to make it rigorous. I also did this step on paper. The goal here was to write out a full solution and completely convince myself that it was correct before I tried to convince anyone else. As such, I kept my writing as symbolic and terse as possible, while maintaining a high level of detail. Again, after writing out this draft, I left it for some time before coming back and reading through it again with fresh eyes.&lt;/p>
&lt;p>Finally, after I was confident that I had a full solution that was logical and reasoned, I wrote a good copy in LaTeX. Since first year, I have consistently found that typesetting my final homework submissions in LaTeX encourages me to write more precisely and descriptively. I often liken it to the correlation that some of my peers find between dressing more formally and performing better on assessments. The medium is cleaner; there&amp;rsquo;s less potential to hide shoddy work on a typed page (unintentionally, at least). For MATH 223, I typically typeset my assignments during the weekly office hours on Wednesdays and Thursdays, which gave me a chance to ask clarifying questions and finally listen to others discuss their solutions. Note, however, that this was not some baked-in editing stage. If I found a mistake while typesetting (fortunately, this only happened twice), I considered it to be as grave an error as submitting that mistake and dedicated extensive further review to whatever concept I got wrong. As usual, once the typeset assignment was finished, I put it aside before giving it one more read, in which I compared it to my rough draft.&lt;/p>
&lt;p>Naturally, this process had its downsides. It was time-consuming, it often felt tedious when applied to simpler problems, and it took some of the fun out of problem-solving. That said, it never failed me. In the ten homework assignments that I handed in, not a single error slipped through the series of filters that my process had created. This was the most effective change I made in my study habits and I intend to continue it well into the future.&lt;/p>
&lt;h2 id="find-a-single-source-of-truth-or-make-one">Find a single source of truth or make one.&lt;/h2>
&lt;p>Another failing I found in my study habits from first year was that I was easily distracted by all the learning resources available in my courses. I would read the textbook, go through slide decks, and browse my handwritten notes in equal parts. However, these resources were never of equal value.&lt;/p>
&lt;p>In MATH 120, we nominally had Tom Apostol&amp;rsquo;s &lt;em>Calculus&lt;/em> as our textbook. &lt;em>Book of Proof&lt;/em>, by Richard Hammack, was also recommended as a supplement for proof techniques. However, neither of these books covered the full scope of the course. There was no pre-existing single source of truth. Instead, I was responsible for making one with my lecture notes, though I did not realize it at the time.&lt;/p>
&lt;p>The notion of single sources of truth for courses first dawned on me when I was writing my initial batch of reflections for the courses I took in my first term. I noticed that in courses like chemistry and computer science (CHEM 121 and CPSC 110, for those interested), where the course had a custom textbook (technically an edX course in the case of computer science), studying from the textbook paid much larger dividends than courses that lacked such resources. This realization changed my strategy for future courses, including MATH 223. If there was no single source of truth, one would have to be made.&lt;/p>
&lt;p>I have always taken essentially verbatim notes in lectures, both in my math courses and elsewhere. That remained true in 223, but I did change how I used them. For me, someone with a computer science and physics background, the lecture notes I accumulate over the course of a term are just that: notes, a summary of the material covered. Writing them helps me with retention, and reviewing them occasionally helps while studying. In honours math, however, I have come to believe that notes are not a summary; they are one&amp;rsquo;s closest thing to a single source of truth and should be treated as such. Even when math courses list a required textbook (and especially when they list multiple), no external resource is going to match the course&amp;rsquo;s content exactly. Because of this, I had to construct a single source of truth for MATH 223 using my lecture notes.&lt;/p>
&lt;p>I had never previously been one to copy out neat, formatted versions of my notes after I take them, but I was forced to change that. MATH 223 had a rather bizarre schedule for a linear algebra course. We first covered essentially all of the possible linear algebra one could do on 2x2 matrices in a week and a half; then we moved to arbitrary-sized matrices and covered essentially all of MATH 221, UBC&amp;rsquo;s non-honours linear algebra course, in the next couple weeks; and finally, we went through everything again with full generality, using fields, abstract vector spaces, inner product spaces, and spectral theory and some new applications, like systems of differential equations and singular value decomposition, along the way. It was unorthodox, not very axiomatic, and yet an extremely effective way to learn abstract linear algebra that I have not seen replicated in any textbook. The primary drawback for me was that it made a mess of my chronological notes, so at the end of each lecture day, I transcribed and reformatted my verbatim notes into a OneNote notebook, organizing everything in what I found to be a more logical order. This notebook served as my single source of truth for the course and saved me a great deal of time while working on homework and studying.&lt;/p>
&lt;p>In hindsight, OneNote was probably a suboptimal choice for how to store my notes. I knew my &amp;ldquo;good copy&amp;rdquo; would have to be digital, due to the constant modifications to and expansions of material from weeks prior (as well as my rather horrid handwriting). However, I probably should have simply committed to writing a proper LaTeX document to save myself all the formatting troubles. This would have had the added benefit of being easier to share with others once I was done with it. Regardless of format though, keeping everything I needed to understand anything in the course in one place was a major contribution to my later success.&lt;/p>
&lt;h2 id="diversify-modes-of-learning">Diversify modes of learning.&lt;/h2>
&lt;p>If I were to sum up everything I heard at all of the &amp;ldquo;learning to learn at university&amp;rdquo; workshops I attended during orientation in one sentence, it would be &amp;ldquo;Learn by doing.&amp;rdquo; However, the past year and a half have taught me that drilling with every available practice problem whose likeness may appear on the exam is not enough to gain a full understanding of a topic. Obviously, actively reading through notes and textbooks is important when reviewing for a course. Many of my classmates in MATH 120 attempted hundreds of quite similar practice problems and ended up learning algorithms, not concepts. I did not make this mistake, but I did notice that I had trouble generalizing many of the ideas in the course. I could explain a formal definition using predicate logic, but turning that into a picture would take me a few minutes (and not just because of my lacklustre drawing abilities). Completing a fairly wide range of practice problems had still left me unable to fully understand some content. After considering this problem for a while, the realization I came to was that the problems I had been practicing with were only providing one perspective on the material. To remedy this in MATH 223, I would need to practice using more diverse methods, so I could ensure I was learning concepts, not recipes.&lt;/p>
&lt;p>One way I sought to put this idea into practice was by trying to solve various classes of common problems computationally. This was only possible because of the fortunate coincidence that I was taking a linear algebra course, where computational methods for most problems (eigenvalue computations notwithstanding) are generally quite analogous to how one would solve those problems on paper. Because of this coincidence, I was able to learn a great deal from building up basic libraries for all the usual computations I found myself doing, like matrix multiplication, Gauss-Jordan elimination, and Gram-Schmidt orthogonalization. I first built these libraries using Python using NumPy arrays but as few other non-primitive functions as possible. Then, as a fun challenge for myself, I re-implemented many of the algorithms in Racket using a matrix data structure I had created. Personally, I found these exercises to be extremely helpful in building a general understanding of mathematical concepts. Solving computationally allowed me to look at a common problem in its most general form, and recognize any interesting edge cases that may have been lurking.&lt;/p>
&lt;p>To be clear, I am under no delusions that my epiphany of &amp;ldquo;just make a computer do it&amp;rdquo; will be of any use to someone trudging through Real Analysis II. However, in certain contexts, learning the numerical methods for a problem can be quite valuable, and it is certainly something I intend to do in my future math and physics courses. More generally, one should try to diversify how they learn as much as possible, not just by both reading notes and doing practice problems, but by doing different types of practice problems, and inventing one&amp;rsquo;s own if need be.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I want to emphasize that none of this is prescriptive or even intended as a recipe for anyone else to follow. These are simply policies I adopted in one course, in one term, which led to one final mark of 100% (albeit one in the hardest course of my degree thus far). The true test of their efficacy will come in a little under a year, once I conclude my work term and am once again taking classes full-time. Once back, I will put the lessons of MATH 223 into practice and see whether they continue to hold.&lt;/p>
&lt;p>Putting plans for the future aside, one question remains unanswered: is it all worth it? Each novel strategy I devised for myself came with a trade-off. Working alone meant forgoing much of the camaraderie I had in first year with the other students in MATH 120, many of whom remain close friends. My homework process kept linear algebra problems buzzing around in the back of my head during what little time I had for recreation. Maintaining a single source of truth for the course meant working late into the night reading, writing, and organizing notes. Forcing myself to practice linear algebra in as many different ways as possible kept my notes, not my books, at my bedside for much of the term and tapped some of my limited energy for programming in the term when I was taking my first real software engineering course and had just begun work as the lead server TA for UBC&amp;rsquo;s introductory computer science course. Indeed, it is extremely easy to look back and think about how I could have made my life a good deal simpler this term, potentially even obtaining the same mark. In the end, however, when I look at my final mark and think about all the trials I overcame and all the progress I made since first year to reach it, it would be a lie to say I have many doubts that my time was well-spent.&lt;/p></description></item><item><title>Spacetime Calculator</title><link>https://alexdsteele.com/project/spacetime-calculator/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/spacetime-calculator/</guid><description>&lt;p>This Swing application allows users to plot events in two-dimensional spacetime. It demonstrates how events transform between reference frames, and how concepts such as simultaneity or two events being in the same place are frame-dependent. Additionally, it allows users to calculate how far two events are from each other in spacetime; whether they are timelike, spacelike, or null separated; and whether they appear to be simultaneous or in the same place in a given frame.&lt;/p></description></item><item><title>TSL Interpreter</title><link>https://alexdsteele.com/project/tsl-interpreter/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/tsl-interpreter/</guid><description>&lt;p>This is just a fun little project I made over the August long weekend. It&amp;rsquo;s a parser and interpreter for the &amp;ldquo;Tiny Student Language&amp;rdquo;, a sublanguage of &lt;a href="https://racket-lang.org/" target="_blank" rel="noopener">Racket&lt;/a>. I made it as an accessible, high-level demonstration of how programming languages work. As such, it has very few built-in types and functions. However, it is still capable of correctly evaluating recursive and higher-order functions, and, theoretically, can traverse trees and graphs using mutually-recursive functions (this would be rather ugly and inefficient due to the absence of define-struct and local though). I don&amp;rsquo;t plan on adding new features to TSL in the future, so as to keep it simple, but I would like to expand its error handling, so imperfect code doesn&amp;rsquo;t cause an instant crash.&lt;/p></description></item><item><title>UBC Course Monitor</title><link>https://alexdsteele.com/project/ubc-course-monitor/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/ubc-course-monitor/</guid><description>&lt;p>UBC Course Monitor is a web application that I built to help fellow UBC students find open seats in courses they want to take. Users can sign up to monitor any course section publically listed on the University of British Columbia&amp;rsquo;s Student Services Centre. Once they add the course to their list, they will receive an email notification when a seat opens up. The backend of the site was built using the Django framework and uses a Celery queue to do background monitoring. The application is deployed on Heroku and uses a PostgreSQL database to manage users and courses.&lt;/p></description></item></channel></rss>