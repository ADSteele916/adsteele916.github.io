<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Languages | Alex Steele</title><link>https://alexdsteele.com/tag/programming-languages/</link><atom:link href="https://alexdsteele.com/tag/programming-languages/index.xml" rel="self" type="application/rss+xml"/><description>Programming Languages</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 04 Aug 2020 00:00:00 +0000</lastBuildDate><image><url>https://alexdsteele.com/media/icon_hua290f4412f247f04a1fefae38f5cd580_85566_512x512_fill_lanczos_center_3.png</url><title>Programming Languages</title><link>https://alexdsteele.com/tag/programming-languages/</link></image><item><title>TSL Interpreter</title><link>https://alexdsteele.com/project/tsl-interpreter/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><guid>https://alexdsteele.com/project/tsl-interpreter/</guid><description>&lt;p>This is just a fun little project I made over the August long weekend. It&amp;rsquo;s a parser and interpreter for the &amp;ldquo;Tiny Student Language&amp;rdquo;, a sublanguage of &lt;a href="https://racket-lang.org/" target="_blank" rel="noopener">Racket&lt;/a>. I made it as an accessible, high-level demonstration of how programming languages work. As such, it has very few built-in types and functions. However, it is still capable of correctly evaluating recursive and higher-order functions, and, theoretically, can traverse trees and graphs using mutually-recursive functions (this would be rather ugly and inefficient due to the absence of define-struct and local though). I don&amp;rsquo;t plan on adding new features to TSL in the future, so as to keep it simple, but I would like to expand its error handling, so imperfect code doesn&amp;rsquo;t cause an instant crash.&lt;/p></description></item></channel></rss>